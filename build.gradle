/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	compile fileTree(dir: 'lib', include: ["*.jar"])
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:22.0'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/baseball_elimination', 'src/boggle', 'src/burrows_wheeler', 'src/collinear_points', 'src/deques_and_randomized_queues', 'src/eight_puzzle', 'src/kd_trees', 'src/percolation', 'src/seam_carving', 'src/wordnet']
		}
		resources {
			srcDirs = ["sample_data/"]
		}
	}
}

task run_1_Percolation(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'Percolation'
	classpath = sourceSets.main.runtimeClasspath
}

task run_2_Deque(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'Deque'
	classpath = sourceSets.main.runtimeClasspath
}

task run_2_RandomizedQueue(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'RandomizedQueue'
	classpath = sourceSets.main.runtimeClasspath
}

task run_2_Permutation(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'Permutation'
	args '8' 
	classpath = sourceSets.main.runtimeClasspath
	doFirst {
		String fileName = "sample_data/queues/duplicates.txt"
		standardInput = new FileInputStream(file(fileName))
    }
}

task run_3_BruteForteCollinearPoints(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'BruteCollinearPoints'
	classpath = sourceSets.main.runtimeClasspath
}

task run_3_FastCollinearPoints(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'FastCollinearPoints'
	classpath = sourceSets.main.runtimeClasspath
}

task run_4_8Puzzle(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'Solver'
	classpath = sourceSets.main.runtimeClasspath
}

task run_5_KDTrees(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 1'
	main = 'KdTree'
	classpath = sourceSets.main.runtimeClasspath
}

task run_1_WordNet(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 2'
	main = 'Outcast'
	classpath = sourceSets.main.runtimeClasspath
	args = ["${projectDir}/sample_data/wordnet/synsets.txt", "${projectDir}/sample_data/wordnet/hypernyms.txt", "${projectDir}/sample_data/wordnet/outcast5.txt", "${projectDir}/sample_data/wordnet/outcast8.txt", "${projectDir}/sample_data/wordnet/outcast11.txt"]
}

task run_2_PrintSeam(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 2'
	main = 'PrintSeams'
	classpath = sourceSets.main.runtimeClasspath
	args "${projectDir}/sample_data/seamCarving/7x10.png"
}

task run_2_SeamCarvingResizeDemo(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 2'
	main = 'ResizeDemo'
	classpath = sourceSets.main.runtimeClasspath
	args = ["${projectDir}/sample_data/seamCarving/HJocean.png", "50", "0"]
}

task run_3_BaseballElimination(type: JavaExec, dependsOn: 'classes') {
	group 'Algorithms 2'
	main = 'BaseballElimination'
	classpath = sourceSets.main.runtimeClasspath
}

task run_4_BoggleSolver(type: JavaExec, dependsOn: 'classes'){
	group 'Algorithms 2'
	main = 'BoggleSolver'
	classpath = sourceSets.main.runtimeClasspath
}

task run_5_BurrowsWheeler(type: JavaExec, dependsOn: 'classes'){
	group 'Algorithms 2'
	main = 'BurrowsWheeler'
	classpath = sourceSets.main.runtimeClasspath
	args '-' 
	doFirst {
		String fileName = "sample_data/burrows/abra.txt"
		standardInput = new FileInputStream(file(fileName))
    }
}

run {
	args(["synsets.txt", "hypernyms.txt", "outcast5.txt", "outcast8.txt", "outcast11.txt"])
}

// Define the main class for the application
mainClassName = 'BaseballElimination'

